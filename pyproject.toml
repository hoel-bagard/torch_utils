[project]
name = "hbtorch_utils"
authors = [{name="Bagard Hoel"}]
description = "Torch Utils"
readme = "README.md"
classifiers = [
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.11",
            "Operating System :: OS Independent",
            "Intended Audience :: Developers",
]
license = {text = "MIT"}
requires-python = ">=3.10"

[project.urls]
"Homepage" = "https://github.com/hoel-bagard/torch-utils"
"Bug Tracker" = "https://github.com/hoel-bagard/torch-utils/issues"

[tool.poetry]
name = "hbtorch_utils"
version = "0.2.0"
description = "Torch Utils"
authors = ["Bagard Hoel"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
numpy = ">=1.21"
opencv-python = "^4.7.0.72"
albumentations = "^1.3.1"
einops = "^0.6.1"
tensorboard = "^2.13.0"
pillow = "^9.5.0"
torch = ">=2.0"

# [tool.poetry.group.torchcpu]
# optional = true
# [tool.poetry.group.torchcpu.dependencies]
# torch = [
#   {url = "https://download.pytorch.org/whl/cpu/torch-2.0.1-cp311-none-macosx_11_0_arm64.whl", platform = "darwin", python = ">=3.11,<3.12"},
#   # {url = "https://download.pytorch.org/whl/torch-2.0.1-cp311-cp311-manylinux2014_aarch64.whl", platform = "linux", python = ">=3.11,<3.12"},
#   # {url = "https://download.pytorch.org/whl/cpu/torch-2.0.1%2Bcpu-cp311-cp311-win_amd64.whl", platform = "win32", python = ">=3.11,<3.12"},
#   {version = "^2.0.1", platform = "linux", source = "pytorch-cpu"},
#   {version = "^2.0.1", platform = "win32", source = "pytorch-cpu"},
# ]
# [[tool.poetry.source]]
# name = "pytorch-cpu"
# url = "https://download.pytorch.org/whl/cpu"
# priority = "explicit"

# [tool.poetry.group.torchgpu]
# optional = true
# [tool.poetry.group.torchgpu.dependencies]
# torch = {version = "^2.00.1", source = "torchcu117" }
# [[tool.poetry.source]]
# name = "torchcu117"
# url = "https://download.pytorch.org/whl/cu117"
# priority = "explicit"

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
ruff = "0.0.270"
pyright = "^1.1.278"
pre-commit = "^3.3.2"
flake8-comprehensions = "^3.12.0"
flake8-docstrings = "^1.7.0"
flake8-builtins = "^2.1.0"
flake8-quotes = "^3.3.2"
pep8-naming = "^0.13.3"
flake8-import-order = "^0.18.2"
flake8-noqa = "^1.3.1"
flake8-broken-line = "^0.6.0"
flake8-commas = "^2.1.0"
Flake8-pyproject = "^1.2.3"
opencv-stubs = "^0.0.8"

[tool.poetry.group.test]
optional = true
[tool.poetry.group.test.dependencies]
pytest = "^7.3.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib",]

[tool.ruff]
select = ["ALL"]
# D1: Do not require docstrings
# D203: one-blank-line-before-class  (incompatible)
# D213: multi-line-summary-second-line  (incompatible)
# D407: Missing dashed underline after section ("Args", "Returns")
# ERA001: Found commented-out code
# G004: Logging statement uses f-string
ignore = ["D1", "D203", "D213", "D407", "ERA001", "G004", "S311", "TD", "TRY"]
line-length = 120

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.isort]
order-by-type = false

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.pylint]
max-args = 10

[tool.pyright]
include = ["src/hbtorch_utils"]
ignore = ["**/__init__.py"]

pythonVersion = "3.11"
pythonPlatform = "Linux"

strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportMissingModuleSource = false
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"
reportUntypedNamedTuple = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportMissingSuperCall = false
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportUnknownVariableType = "warning"
reportUnknownMemberType = false
reportMissingParameterType = "warning"
reportMissingTypeArgument = "warning"
reportCallInDefaultInitializer = false
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportImplicitStringConcatenation = false
reportUnusedCallResult = false
reportUnusedExpression = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportMatchNotExhaustive = "warning"

[tool.flake8]
max-line-length = 120
docstring-convention = "google"
import-order-style = "smarkets"
inline-quotes = "double"
exclude = ["env", "venv", ".venv", ".env"]
ignore = ["D1", "E226", "NQA102", "W503"]
application-import-names = ["hbtorch_utils"]
per-file-ignores = ["**/__init__.py:F401", "tests/**.py:I201"]

[tool.pylint.messages_control]
max-line-length = 120
disable = [
    "no-member",
    "import-outside-toplevel",
]
